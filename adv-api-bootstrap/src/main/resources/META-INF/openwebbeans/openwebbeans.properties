#Licensed to the Apache Software Foundation (ASF) under one
#or more contributor license agreements.  See the NOTICE file
#distributed with this work for additional information
#regarding copyright ownership.  The ASF licenses this file
#to you under the Apache License, Version 2.0 (the
#"License"); you may not use this file except in compliance
#with the License.  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#Unless required by applicable law or agreed to in writing,
#software distributed under the License is distributed on an
#"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#KIND, either express or implied.  See the License for the
#specific language governing permissions and limitations
#under the License.
# OpenWbBeans overrides for the Jini Advanced API bootstrap


################################################################################################
################################### DEFAULT SPI CONFIGURATION SECTION ##########################
################################################################################################

# Override the basic configuration, which has ordinal of 10
configuration.ordinal=20

########################### Default ApplicationBoundary Service ################################
# Default implementation of the ApplicationBoundaryService.
# This service defines the 'outer boundary' classloader of each Application.
# For a WAR it is the WebAppClassLoader, for EARs it is the Ear ClassLoader.
# This is to e.g. prevent a producer method for a @RequestScoped EntityManager to use the
# shared tomcat/tomee/etc ClassLoader to be used for loading the generated proxy class
# as this would create mem leaks.
# GT- We may have to look into this...
org.apache.webbeans.spi.ApplicationBoundaryService=org.apache.webbeans.corespi.se.DefaultApplicationBoundaryService
################################################################################################

## Only scan jars with a beans.xml
# This is required, because the default scanner will go through all the jars on the reported classpath.
# That's problematic in Jini becuase that shows up as the codebase jars, which are http urls, not
# resource paths.
org.apache.webbeans.scanBeansXmlOnly=true