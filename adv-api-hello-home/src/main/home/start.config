/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* Configuration file for starting non-secure Hello service.
    Note that this service is a pure JERI dynamic proxy export, so strictly
    speaking, it doesn't need a codebase server, but in order to be seen in 
    the browser, the api has to be available to download.
 */

import java.io.File;

import org.apache.river.tools.rt.start.Config;
import org.apache.river.tools.rt.start.NonActivatableServiceDescriptor;
import org.apache.river.tools.rt.start.ServiceDescriptor;
import org.apache.river.tools.rt.start.ServiceWithMainMethodDescriptor;

org.apache.river.tools.rt.start {

    private static policy = "application.policy";
    private static classpath = Config.defaultClasspath();
    /* Used to be "lib${/}hello-api.jar" + File.pathSeparator
        + "lib${/}hello-service.jar"; */
    private static config = "application.config";
    port=8090;
    private static codebasePrefix= "http://" + ConfigUtil.getHostAddress() 
        + ":" + port + "/";
    private static codebase = Config.defaultCodebase(port);

    static serviceDescriptors = new ServiceDescriptor[] {
	new NonActivatableServiceDescriptor(
            "",
            policy,
            "lib/tools.jar",
            "com.sun.jini.tool.ClassServer",
            new String[]{"-port", Integer.toString(port), "-dir",
                "lib-dl"}),
	new ServiceWithMainMethodDescriptor(
	    codebase, policy, classpath,
	    "org.apache.river.container.advapi.Main",
	    new String[] { config })
    };

}//com.sun.jini.start
